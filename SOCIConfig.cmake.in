@PACKAGE_INIT@



# Ensure that the Core target is always included (and as first component)
list(REMOVE_ITEM SOCI_FIND_COMPONENTS Core)
list(INSERT SOCI_FIND_COMPONENTS 0 Core)

set(__dep_soci_comps  "@SOCI_DEPENDENCY_SOCI_COMPONENTS@")
set(__dep_names       "@SOCI_DEPENDENCY_NAMES@")
set(__dep_dep_targets "@SOCI_DEPENDENCY_TARGETS@")
set(__dep_required    "@SOCI_DEPENDENCY_REQUIRED@")
set(__dep_macro_names "@SOCI_DEPENDENCY_MACRO_NAMES@")
set(__dep_components  "@SOCI_DEPENDENCY_COMPONENTS@")

list(LENGTH __dep_soci_comps __list_size)
foreach (__item IN ITEMS __dep_names __dep_dep_targets __dep_required __dep_macro_names __dep_components)
    list(LENGTH ${__item} __current_size)
    if (NOT (__list_size EQUAL __current_size))
        message(FATAL_ERROR "SociConfig is invalid -> dependency lists have different sizes")
    endif()
endforeach()
unset(__current_size)

math(EXPR __list_size "${__list_size} - 1")

foreach(__comp IN LISTS SOCI_FIND_COMPONENTS)
  if (NOT EXISTS "${CMAKE_CURRENT_LIST_DIR}/SOCI${__comp}Targets.cmake")
    message(FATAL_ERROR "Unknown component '${__comp}' for SOCI")
  endif()

  # Handle component-specific dependencies
  set(__link_targets)
  set(__define_macros)
  foreach (__i RANGE ${__list_size})
    list(GET __dep_soci_comps ${__i} __dep_comp)
    if (__dep_comp MATCHES "::${__comp}$")
      # This entry matches the current component
      list(GET __dep_names ${__i} __dep)
      list(GET __dep_dep_targets ${__i} __targets)
      list(GET __dep_required ${__i} __required)
      list(GET __dep_macro_names ${__i} __macros)
      list(GET __dep_components ${__i} __components)

      # Split list-valued entries to become actual lists
      string(REPLACE "|" ";" __targets "${__targets}")
      string(REPLACE "|" ";" __macros "${__macros}")
      string(REPLACE "|" ";" __components "${__components}")

      set(__already_found)
      foreach (__tgt IN LISTS __targets)
        if (TARGET ${__tgt})
          set(__already_found ON)
        else()
          set(__already_found OFF)
          break()
        endif()
      endforeach()

      if (__already_found)
        continue()
      endif()

      if (__components)
        set(__components COMPONENTS ${__components})
      endif()

      find_package(
        ${__dep}
        ${__components}
        ${${CMAKE_FIND_PACKAGE_NAME}_FIND_QUIETLY}
      )

      if (NOT ${__dep}_FOUND)
        if (__required)
          message(FATAL_ERROR "Unable to find the dependency ${__dep} for the requested ${__comp} SOCI component")
        endif()
        continue()
      endif()

      list(APPEND __link_targets  ${__targets})
      list(APPEND __define_macros ${__macros})
    endif()
  endforeach()
  unset(__i)

  include("${CMAKE_CURRENT_LIST_DIR}/SOCI${__comp}Targets.cmake")

  set_property(
    TARGET SOCI::${__comp}
    APPEND
    PROPERTY INTERFACE_LINK_LIBRARIES "${__link_targets}"
  )
  if (__define_macros)
    set_property(
      TARGET SOCI::${__comp}
      APPEND
      PROPERTY INTERFACE_COMPILE_DEFINITIONS "${__define_macros}"
    )
  endif()

  set(${CMAKE_FIND_PACKAGE_NAME}_${__comp}_FOUND ON)
endforeach()
unset(__comp)


unset(__dep_soci_comps)
unset(__dep_names)
unset(__dep_dep_targets)
unset(__dep_required)
unset(__dep_macro_names)
unset(__dep_components)


check_required_components(SOCI)

if (NOT DEFINED SOCI_FOUND OR SOCI_FOUND)
    add_library(soci_interface INTERFACE)

    foreach (__comp IN LISTS SOCI_FIND_COMPONENTS)
        target_link_libraries(soci_interface INTERFACE SOCI::${__comp})
    endforeach()

    add_library(SOCI::SOCI ALIAS soci_interface)
endif()
